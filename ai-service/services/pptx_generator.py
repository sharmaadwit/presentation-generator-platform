from pptx import Presentation
from pptx.util import Inches, Pt
from pptx.enum.text import PP_ALIGN
from pptx.dml.color import RGBColor
from pptx.enum.shapes import MSO_SHAPE
import os
import uuid
import base64
import io
from typing import List, Dict, Any, Optional
import logging
from PIL import Image as PILImage

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class PPTXGenerator:
    def __init__(self):
        self.output_dir = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'generated_presentations')
        self.ensure_output_dir()
    
    def ensure_output_dir(self):
        """Ensure output directory exists"""
        if not os.path.exists(self.output_dir):
            os.makedirs(self.output_dir)
    
    async def generate_presentation(
        self,
        slides: List[Dict[str, Any]],
        presentation_id: str,
        request_data: Dict[str, Any]
    ) -> Dict[str, Any]:
        """Generate a PPTX presentation from selected slides"""
        
        try:
            print(f"🎨 PPTX PRESENTATION GENERATOR STARTED")
            print(f"   - Presentation ID: {presentation_id}")
            print(f"   - Total Slides: {len(slides)}")
            print(f"   - Customer: {request_data.get('customer', 'N/A')}")
            print(f"   - Industry: {request_data.get('industry', 'N/A')}")
            print(f"   - Style: {request_data.get('style', 'N/A')}")
            
            # Create PPTX document
            filename = f"{presentation_id}_{request_data['customer'].replace(' ', '_')}.pptx"
            filepath = os.path.join(self.output_dir, filename)
            
            # Create new presentation
            prs = Presentation()
            
            # Add title slide
            self._add_title_slide(prs, request_data)
            
            # Add content slides
            for i, slide_data in enumerate(slides):
                action = slide_data.get('action', 'copy_exact')
                print(f"📄 PROCESSING SLIDE {i+1}/{len(slides)}")
                print(f"   - Action: {action}")
                print(f"   - Source: {slide_data.get('source_title', 'N/A')}")
                print(f"   - Type: {slide_data.get('slide_type', 'N/A')}")
                
                if action == 'copy_exact':
                    print(f"   - 🔄 Copying exact content (0 AI tokens)")
                    self._add_exact_copy_slide(prs, slide_data, i + 1)
                elif action == 'minor_enhancement':
                    print(f"   - ✨ Minor enhancement (~50 AI tokens)")
                    self._add_enhanced_slide(prs, slide_data, i + 1, request_data)
                else:  # full_generation
                    print(f"   - 🤖 Full AI generation (~200 AI tokens)")
                    self._add_ai_generated_slide(prs, slide_data, i + 1, request_data)
                
                print(f"   - ✅ Slide {i+1} completed")
                print()
            
            # Add conclusion slide
            self._add_conclusion_slide(prs, request_data)
            
            # Save presentation
            prs.save(filepath)
            
            print(f"✅ PPTX presentation saved: {filepath}")
            
            return {
                'filepath': filepath,
                'filename': filename,
                'slideCount': len(slides) + 2,  # +2 for title and conclusion
                'status': 'completed'
            }
            
        except Exception as e:
            print(f"❌ Error generating PPTX presentation: {e}")
            raise e
    
    def _add_title_slide(self, prs: Presentation, request_data: Dict[str, Any]):
        """Add title slide to presentation"""
        slide_layout = prs.slide_layouts[0]  # Title slide layout
        slide = prs.slides.add_slide(slide_layout)
        
        # Set title
        title = slide.shapes.title
        title.text = f"{request_data.get('customer', 'Client')} - {request_data.get('industry', 'Business')}"
        
        # Set subtitle
        subtitle = slide.placeholders[1]
        subtitle.text = f"{request_data.get('useCase', 'Presentation')}\n\nGenerated by AI Presentation Generator"
        
        print(f"📄 Added title slide: {title.text}")
    
    def _add_exact_copy_slide(self, prs: Presentation, slide_data: Dict[str, Any], slide_number: int):
        """Add slide by copying exact content from training data with all visual elements"""
        print(f"📄 EXACT COPY: Processing slide {slide_number}")
        
        # Use blank layout for maximum flexibility
        slide_layout = prs.slide_layouts[6]  # Blank layout
        slide = prs.slides.add_slide(slide_layout)
        
        # Add slide title
        title = slide_data.get('title', f'Slide {slide_number}')
        if title:
            title_shape = slide.shapes.add_textbox(Inches(0.5), Inches(0.5), Inches(9), Inches(1))
            title_frame = title_shape.text_frame
            title_frame.text = title
            title_frame.paragraphs[0].font.size = Pt(24)
            title_frame.paragraphs[0].font.bold = True
            title_frame.paragraphs[0].font.color.rgb = RGBColor(0, 51, 102)
        
        # Add visual elements exactly as they were in training data
        images = slide_data.get('images', [])
        print(f"📸 EXACT COPY: Slide {slide_number} has {len(images)} visual elements")
        
        if images:
            print(f"🎯 PROCESSING {len(images)} VISUAL ELEMENTS FOR EXACT COPY")
            for i, img_data in enumerate(images):
                img_title = img_data.get('title', 'Visual Element')
                print(f"🎨 EXACT COPY VISUAL: {img_title} (type: {img_data.get('type')})")
                
                if img_data.get('image_data') or img_data.get('image_blob'):
                    print(f"📸 EXACT COPY BASE64 IMAGE: {img_title}")
                    self._add_base64_image_to_slide(slide, img_data, i)
                elif img_data.get('image_url'):
                    print(f"🌐 EXACT COPY URL IMAGE: {img_title} - {img_data.get('image_url')}")
                    self._add_url_image_to_slide(slide, img_data, i)
                else:
                    print(f"⚠️ EXACT COPY UNKNOWN TYPE: {img_title}")
                    # Add placeholder text
                    text_shape = slide.shapes.add_textbox(Inches(0.5), Inches(2 + i * 1.5), Inches(9), Inches(1))
                    text_frame = text_shape.text_frame
                    text_frame.text = f"📊 {img_title}"
        
        # Add content with original formatting
        content = slide_data.get('content', '')
        if content:
            content_lines = content.split('\n')
            content_text = '\n'.join([f"• {line.strip()}" for line in content_lines if line.strip()])
            
            if content_text:
                text_shape = slide.shapes.add_textbox(Inches(0.5), Inches(4), Inches(9), Inches(3))
                text_frame = text_shape.text_frame
                text_frame.text = content_text
                text_frame.paragraphs[0].font.size = Pt(14)
        
        # Add source attribution
        source = slide_data.get('sourcePresentation', '')
        if source:
            source_shape = slide.shapes.add_textbox(Inches(0.5), Inches(7), Inches(9), Inches(0.5))
            source_frame = source_shape.text_frame
            source_frame.text = f"Source: {source}"
            source_frame.paragraphs[0].font.size = Pt(10)
            source_frame.paragraphs[0].font.italic = True
            source_frame.paragraphs[0].font.color.rgb = RGBColor(128, 128, 128)
        
        print(f"✅ EXACT COPY: Slide {slide_number} completed with {len(images)} visual elements")
    
    def _add_base64_image_to_slide(self, slide, img_data: Dict[str, Any], index: int):
        """Add base64-encoded image (including GIFs) to slide"""
        try:
            print(f"📸 PROCESSING BASE64 IMAGE: {img_data.get('title', 'Visual Element')}")
            
            # Check if it's a GIF
            is_gif = img_data.get('is_gif', False)
            if is_gif:
                print(f"🎬 Processing GIF image: {img_data.get('title', 'Visual Element')}")
            
            # Handle both 'image_data' (base64 string) and raw binary
            image_data_field = img_data.get('image_data') or img_data.get('image_blob')
            
            if not image_data_field:
                print(f"❌ No image data found in: {img_data}")
                return
            
            # Decode base64 image data
            if isinstance(image_data_field, str):
                # Already base64 encoded
                print(f"📸 Decoding base64 string (length: {len(image_data_field)})")
                image_bytes = base64.b64decode(image_data_field)
            else:
                # Raw bytes
                print(f"📸 Using raw bytes (length: {len(image_data_field)})")
                image_bytes = image_data_field
            
            # For PPTX, we can keep GIFs as GIFs (they're supported)
            if is_gif:
                print(f"🎬 Keeping GIF as animated in PPTX")
            
            # Save image to temporary file
            import tempfile
            temp_filename = os.path.join(tempfile.gettempdir(), f"temp_image_{uuid.uuid4()}.{'gif' if is_gif else 'png'}")
            with open(temp_filename, 'wb') as f:
                f.write(image_bytes)
            
            # Get original image dimensions and position from source data
            original_left = img_data.get('left', 0)
            original_top = img_data.get('top', 0)
            original_width = img_data.get('width', 0)
            original_height = img_data.get('height', 0)
            
            # Convert EMU to Inches (1 inch = 914400 EMU)
            if original_left > 0 and original_top > 0 and original_width > 0 and original_height > 0:
                # Use original positioning and dimensions
                left = Inches(original_left / 914400)
                top = Inches(original_top / 914400)
                width = Inches(original_width / 914400)
                height = Inches(original_height / 914400)
                
                # Ensure image fits within slide boundaries
                # Use standard slide dimensions (10x7.5 inches)
                slide_width = Inches(10)
                slide_height = Inches(7.5)
                
                # If image is too large, scale it down proportionally
                if width > slide_width or height > slide_height:
                    scale_factor = min(slide_width / width, slide_height / height)
                    width = width * scale_factor
                    height = height * scale_factor
                
                print(f"📸 Using original positioning: left={left:.2f}, top={top:.2f}, size={width:.2f}x{height:.2f}")
            else:
                # Fallback to grid layout
                images_per_row = 2
                row = index // images_per_row
                col = index % images_per_row
                
                left = Inches(0.5 + col * 4.5)
                top = Inches(2 + row * 2.5)
                width = Inches(4)
                height = Inches(2.5)
                
                print(f"📸 Using grid layout: left={left:.2f}, top={top:.2f}, size={width:.2f}x{height:.2f}")
            
            # Add image to slide
            slide.shapes.add_picture(temp_filename, left, top, width, height)
            
            # Clean up temp file
            os.remove(temp_filename)
            
            print(f"✅ Successfully added {'GIF' if is_gif else 'base64'} image: {img_data.get('title', 'Visual Element')}")
            
        except Exception as e:
            print(f"❌ Error adding base64 image: {e}")
    
    def _add_url_image_to_slide(self, slide, img_data: Dict[str, Any], index: int):
        """Add image from URL to slide"""
        try:
            import requests
            
            image_url = img_data.get('image_url')
            if not image_url:
                print(f"❌ No image URL found in: {img_data}")
                return
            
            print(f"🌐 Downloading image from URL: {image_url}")
            
            # Download image
            response = requests.get(image_url, timeout=10)
            response.raise_for_status()
            
            # Save to temporary file
            import tempfile
            temp_filename = os.path.join(tempfile.gettempdir(), f"temp_url_image_{uuid.uuid4()}.png")
            with open(temp_filename, 'wb') as f:
                f.write(response.content)
            
            # Calculate position
            images_per_row = 2
            row = index // images_per_row
            col = index % images_per_row
            
            left = Inches(0.5 + col * 4.5)
            top = Inches(2 + row * 2.5)
            width = Inches(4)
            height = Inches(2)
            
            # Add image to slide
            slide.shapes.add_picture(temp_filename, left, top, width, height)
            
            # Clean up temp file
            os.remove(temp_filename)
            
            print(f"✅ Successfully added URL image: {img_data.get('title', 'Visual Element')}")
            
        except Exception as e:
            print(f"❌ Error adding URL image: {e}")
    
    def _add_enhanced_slide(self, prs: Presentation, slide_data: Dict[str, Any], slide_number: int, request_data: Dict[str, Any]):
        """Add enhanced slide with minor AI improvements"""
        # For now, treat as exact copy
        self._add_exact_copy_slide(prs, slide_data, slide_number)
    
    def _add_ai_generated_slide(self, prs: Presentation, slide_data: Dict[str, Any], slide_number: int, request_data: Dict[str, Any]):
        """Add AI-generated slide"""
        # For now, treat as exact copy
        self._add_exact_copy_slide(prs, slide_data, slide_number)
    
    def _add_conclusion_slide(self, prs: Presentation, request_data: Dict[str, Any]):
        """Add conclusion slide to presentation"""
        slide_layout = prs.slide_layouts[0]  # Title slide layout
        slide = prs.slides.add_slide(slide_layout)
        
        # Set title
        title = slide.shapes.title
        title.text = "Thank You"
        
        # Set subtitle
        subtitle = slide.placeholders[1]
        subtitle.text = f"Questions & Discussion\n\n{request_data.get('customer', 'Client')} - {request_data.get('industry', 'Business')}"
        
        print(f"📄 Added conclusion slide")
